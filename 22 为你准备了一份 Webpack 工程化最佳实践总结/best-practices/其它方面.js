// 其他方面最佳实践

// 一. 规范化git工作流：
// 1. 使用Git Hook库例如Husky这类Git Hook库, 可以在提交之前(pre-commit)执行lint校验
// 2. 遵循commitizen规范, 来约束commit log.

// 二、组件库开发、公共UI组件、公共函数库建设
// 这里说的比较抽象，需要具体项目来划分，例如我们可以将多个页面常用的 UI 组件抽象出来；也可以将通用的工具函数库建设起来，类似 Lodash 这类库；

// 三、选择一个顺手的 CSS 预处理语言，Sass、Less、Stylus，只需要团队使用顺手即可；

// 四、前后端分离，要选择合适的 Mock 方案；

// 五、脚手架开发
// 将最佳实践做成标准项目的脚手架，新项目使用脚手架工具来创建；

// 六、抽象解决方案
// 抽象解决方案，融合到 Webpack 配置中，甚至是基于 Webpack 做自己的最佳实践工具链！这个部分在实战篇会用具体案例来介绍一些实用的解决方案。

// 七、指定规则约定
// 包括目录结构规范，代码规范，文档规范