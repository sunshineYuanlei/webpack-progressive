// 合理使用splitChunks

// 在使用splitChunks主要是为了合理的划分资源大小，拆分公共代码. 减小打包体积的同时，增强缓存命中率以充分利用浏览器cache
// 在划分合理性上一定要注意把握力度，太细不能充分利用 HTTP Cache，太粗又会导致加载速度慢，这个度不好笼统的来定义，但是一般来说可以按照下面三个原则来拆分代码：

// 1. 变更频次；
// 2. 页面 Router；
// 3. 动静分离。

// 变更频次：

// 代码按照变更频次来使用splitChunks进行代码拆分, 
// 就是讲不常使用的框架/类库放到一起作为common代码, 
// 然后将业务代码的公共部分和私有部分进行拆分.

// 页面 Router

// 不经常变动的框架和库代码拆分完之后，剩下的是业务代码，业务代码可以根据不同的页面之间公共代码拆分到一起，这样可以保证访问一个页面就可以将框架代码和公共代码缓存到浏览器中，再访问第二个页面就不会增加框架代码和公共代码页面请求了。

// 另外类似 Vue、React 这类单页应用，页面 Router 之间的代码也是可以异步加载的，整个页面第一个入口就将大框架和当前页面的业务代码加载进来了，等点击跳到二级页面的时候只需要动态加载对应 Router 的代码即可。